// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not(in=instruction[15], out=nopcode);
    Or(a=instruction[5], b=nopcode, out=storeA);
    And(a=instruction[15], b=instruction[4], out=storeD);
    And(a=instruction[15], b=instruction[3], out=writeM);
    ARegister(in=AorALU, load=storeA, out=Aout, out[0..14]=addressM);
    DRegister(in=ALUout, load=storeD, out=Dout);
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=AorALU);  // Decides between instruction and ALU output using destination bit for A
    Mux16(a=Aout, b=inM, sel=instruction[12], out=AorM);  // Decides between Address and Memory
    ALU(x=Dout, 
        y=AorM, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=outM, 
        out=ALUout,
        zr=zero, 
        ng=neg
    );

    Not(in=neg, out=notNeg);
    Not(in=zero, out=notZero);
    And(a=notNeg, b=notZero, out=notNegAndNotZero);
    And(a=notNeg, b=zero, out=notNegAndZero);
    Or(a=neg, b=zero, out=negOrZero);

    // JMP decision
    Or(a=instruction[0], b=instruction[1], out=j2j3);
    Or(a=instruction[2], b=j2j3, out=isJump);
    DMux8Way(in=isJump, sel=instruction[0..2], a=null, b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP);
    And(a=JLT, b=neg, out=isJLT);
    And(a=JEQ, b=notNegAndZero, out=isJEQ);
    And(a=JLE, b=negOrZero, out=isJLE);
    And(a=JGT, b=notNegAndNotZero, out=isJGT);
    And(a=JNE, b=notZero, out=isJNE);
    And(a=JGE, b=notNeg, out=isJGE);
    Or8Way(in[0]=null,
           in[1]=isJLT,
           in[2]=isJEQ,
           in[3]=isJLE,
           in[4]=isJGT,
           in[5]=isJNE,
           in[6]=isJGE,
           in[7]=JMP, out=makeJmp);
    And(a=instruction[15], b=makeJmp, out=loadPC);
    PC(in=Aout, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}


//  j1   j2   j3   ng   zr   load   inc
//  0    0    1    0    0     1      -   JGT
//  0    1    0    0    1     1      -   JEQ
//  0    1    1    0    -     1      -   JGE
//  1    0    0    1    -     1      -   JLT
//  1    0    1    -    0     1      -   JNE
//  1    1    0    1/0  0/1   1      -   JLE
//  1    1    1    -    -     1      -   JMP
